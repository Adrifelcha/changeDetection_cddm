knitr::opts_chunk$set(echo = TRUE)
library(rmdformats)
load("./archive/abrupt_gradual.Rdata")
dim(ag)
I <- dim(ag)[4]
J <- dim(ag)[3]
K <- dim(ag)[1]
colnames(ag) <- c("resp", "true", "mean", "velocity", "change", "rt")
p <- 15
c <- 1
ag[1:5,,c,p]
data_stationary <- ag[,,1,]  # Condition 1:  No changes
data_abrupt <- ag[,,2,]      # Condition 2:
data_gradual <- ag[,,3,]     # Condition 3:
data_mixed <- ag[,,4,]       # Condition 4:
# We double-check that there are no change-points recorded in this condition, for any of the 24 participants
unique(data_stationary[,"change",])
# We double-check that the velocity (i.e. rate of change) has a fixed value of `0`, for all 24 participants
unique(data_stationary[,"velocity",])
unique(data_stationary[,"mean",])
ag[,"resp",,]
ag[,"resp",,] <- ag[,"resp",,] %% (2*pi)
ag[,"true",,] <- ag[,"true",,] %% (2*pi)
ag[,"mean",,] <- ag[,"mean",,] %% (2*pi)
300*4
knitr::opts_chunk$set(echo = TRUE)
library(rmdformats)
load("./archive/abrupt_gradual.Rdata")
dim(ag)
I <- dim(ag)[4]
J <- dim(ag)[3]
K <- dim(ag)[1]
colnames(ag) <- c("resp", "true", "mean", "velocity", "change", "rt")
p <- 15
c <- 1
ag[1:5,,c,p]
ag[,"resp",,] <- ag[,"resp",,] %% (2*pi)
ag[,"true",,] <- ag[,"true",,] %% (2*pi)
ag[,"mean",,] <- ag[,"mean",,] %% (2*pi)
data_stationary <- ag[,,1,]  # Condition 1:  No changes
data_abrupt <- ag[,,2,]      # Condition 2:
data_gradual <- ag[,,3,]     # Condition 3:
data_mixed <- ag[,,4,]       # Condition 4:
# We double-check that there are no change-points recorded in this condition, for any of the 24 participants
unique(data_stationary[,"change",])
# We double-check that the velocity (i.e. rate of change) has a fixed value of `0`, for all 24 participants
unique(data_stationary[,"velocity",])
unique(data_stationary[,"mean",])
###########################################################
#  Arbitrary color palettes used throughout all plots     #
###########################################################
color_stationary <- function(alpha){
# We use a distinctive color per subject
# Arbitrarily selected to go around a color wheel :)
return(c(rgb(235/255,223/255,53/255,alpha), rgb(235/255,144/255,53/255,alpha),
rgb(235/255,53/255,53/255,alpha), rgb(235/255,53/255,174/255,alpha),
rgb(204/255,53/255,235/255,alpha), rgb(126/255,53/255,235/255,alpha),
rgb(78/255,53/255,235/255,alpha), rgb(53/255,72/255,235/255,alpha),
rgb(53/255,132/255,235/255,alpha), rgb(53/255,211/255,235/255,alpha),
rgb(53/255,235/255,120/255,alpha), rgb(84/255,235/255,53/255,alpha),
rgb(204/255,235/255,53/255,alpha), rgb(235/255,198/255,53/255,alpha),
rgb(235/255,96/255,53/255,alpha), rgb(235/255,53/255,53/255,alpha),
rgb(235/255,53/255,108/255,alpha), rgb(235/255,53/255,235/255,alpha),
rgb(114/255,53/255,235/255,alpha), rgb(53/255,96/255,235/255,alpha),
rgb(53/255,229/255,235/255,alpha), rgb(53/255,235/255,96/255,alpha),
rgb(217/255,235/255,53/255,alpha), rgb(235/255,96/255,53/255,alpha)))
}
data <- ag
cond <- 1
color_stationary <- function(alpha){
# We use a distinctive color per subject
# Arbitrarily selected to go around a color wheel :)
return(c(rgb(235/255,223/255,53/255,alpha), rgb(235/255,144/255,53/255,alpha),
rgb(235/255,53/255,53/255,alpha), rgb(235/255,53/255,174/255,alpha),
rgb(204/255,53/255,235/255,alpha), rgb(126/255,53/255,235/255,alpha),
rgb(78/255,53/255,235/255,alpha), rgb(53/255,72/255,235/255,alpha),
rgb(53/255,132/255,235/255,alpha), rgb(53/255,211/255,235/255,alpha),
rgb(53/255,235/255,120/255,alpha), rgb(84/255,235/255,53/255,alpha),
rgb(204/255,235/255,53/255,alpha), rgb(235/255,198/255,53/255,alpha),
rgb(235/255,96/255,53/255,alpha), rgb(235/255,53/255,53/255,alpha),
rgb(235/255,53/255,108/255,alpha), rgb(235/255,53/255,235/255,alpha),
rgb(114/255,53/255,235/255,alpha), rgb(53/255,96/255,235/255,alpha),
rgb(53/255,229/255,235/255,alpha), rgb(53/255,235/255,96/255,alpha),
rgb(217/255,235/255,53/255,alpha), rgb(235/255,96/255,53/255,alpha)))
}
source("~/Desktop/changeDetection_cddm/functions/auxiliary/color_palettes.R", echo=TRUE)
all_conditions(0.2)
x <- all_conditions(0.2)
x[1]
source("~/Desktop/changeDetection_cddm/functions/auxiliary/color_palettes.R", echo=TRUE)
source("~/Desktop/changeDetection_cddm/functions/auxiliary/color_palettes.R", echo=TRUE)
all_conditions(0.2)
x <- all_conditions(0.2)
x[3]
x[2]
source("~/Desktop/changeDetection_cddm/functions/auxiliary/color_palettes.R", echo=TRUE)
condition
condition <- 1
color <- color_all_conditions[condition]
color <- color_all_conditions(0.2)[condition]
color
color <- color_all_conditions(0.3)[condition]
color
sub=NA
is.na(sub)
color <- color_all_conditions(0.3)[condition]
color
color[1]
color <- color_all_conditions(0.3)[condition]
color
color[1]
color[2]
color_all_conditions(0.3)[condition]
x
x[[1]]
color <- color_all_conditions(0.3)[[condition]]
color
color[1]
# Create blank plotting space
plot(-10:10,-10:10,type="n", ann = FALSE, axes = FALSE,
xlim=c(-pm,pm),ylim=c(-pm,pm))
# Part 1: Environment set-up and preparation
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set.seed(123)
## Load custom functions
source("./sim_randomWalk.R")
# Switch between Cardinal and Rectangular Coordinates
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
rectToPolar <- function(x,y){
n <- length(x)
driftAngle <- atan2(y,x)
driftLength <- sqrt((x^2)+(y^2))
output <- as.data.frame(cbind(driftAngle,driftLength))
colnames(output) <- c("dAngle","dLength")
return(output)
}
polarToRect <- function(vectorAngle,vectorLength){
x <- vectorLength*cos(vectorAngle)
y <- vectorLength*sin(vectorAngle)
X <-  as.data.frame(cbind(x,y))
colnames(X) <-  c("x","y")
return(X)
}
# Switch between degrees and radians
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
degToRad <- function(theta.deg){
theta <-  theta.deg * pi /180  #Transform to radians
return(theta)
}
radToDeg <- function(theta.rad){
theta <- theta.rad * (180/pi)
return(theta)
}
source("./functions/auxiliary/color_palettes.R")
source("./functions/auxiliary/transformations.R")
source("~/Desktop/changeDetection_cddm/functions/plot_data.R", echo=TRUE)
